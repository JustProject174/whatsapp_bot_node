require('dotenv').config();
const express = require('express');
const axios = require('axios');
const app = express();

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Logging middleware
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`${timestamp} - ${req.method} ${req.path}`);
  
  if (req.path !== '/webhook' || process.env.DEBUG_WEBHOOKS === 'true') {
    console.log('Headers:', JSON.stringify(req.headers, null, 2));
    console.log('Body:', JSON.stringify(req.body, null, 2));
  }
  next();
});

// Configuration
const config = {
  idInstance: process.env.ID_INSTANCE,
  apiToken: process.env.API_TOKEN_INSTANCE,
  baseUrl: `https://1103.api.green-api.com/waInstance${process.env.ID_INSTANCE}`,
  port: process.env.PORT || 3000,
  debug: process.env.DEBUG === 'true'
};

// Validate configuration
if (!config.idInstance || !config.apiToken) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ID_INSTANCE –∏ API_TOKEN_INSTANCE –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// User sessions storage (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
class UserSessionManager {
  constructor() {
    this.sessions = new Map();
  }

  isNewUser(chatId) {
    return !this.sessions.has(chatId);
  }

  createUser(chatId) {
    this.sessions.set(chatId, {
      firstContact: new Date(),
      lastActivity: new Date(),
      messageCount: 0,
      state: 'welcome'
    });
  }

  updateActivity(chatId) {
    if (this.sessions.has(chatId)) {
      const session = this.sessions.get(chatId);
      session.lastActivity = new Date();
      session.messageCount++;
      this.sessions.set(chatId, session);
    }
  }

  getUserState(chatId) {
    return this.sessions.get(chatId)?.state || 'welcome';
  }

  setUserState(chatId, state) {
    if (this.sessions.has(chatId)) {
      const session = this.sessions.get(chatId);
      session.state = state;
      this.sessions.set(chatId, session);
    }
  }

  getAllUsers() {
    return Array.from(this.sessions.entries()).map(([chatId, session]) => ({
      chatId,
      ...session
    }));
  }

  deleteUser(chatId) {
    return this.sessions.delete(chatId);
  }

  clear() {
    this.sessions.clear();
  }
}

const userManager = new UserSessionManager();

// Green API Service
class GreenAPIService {
  constructor(baseUrl, apiToken) {
    this.baseUrl = baseUrl;
    this.apiToken = apiToken;
    this.axios = axios.create({
      timeout: 30000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }

  async makeRequest(endpoint, data = null, method = 'GET') {
    const url = `${this.baseUrl}/${endpoint}/${this.apiToken}`;
    
    try {
      const response = method === 'GET' 
        ? await this.axios.get(url)
        : await this.axios.post(url, data);
      
      return { success: true, data: response.data };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API ${endpoint}:`, {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: url
      });
      
      return { 
        success: false, 
        error: error.response?.data || { message: error.message }
      };
    }
  }

  async sendMessage(chatId, text) {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${chatId}:`, text.substring(0, 100) + '...');
    
    const result = await this.makeRequest('sendMessage', {
      chatId,
      message: text
    }, 'POST');

    if (result.success) {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', result.error);
    }

    return result;
  }

  async sendButtons(chatId, message, buttons) {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ ${chatId}`);
    
    const formattedButtons = buttons.map((text, index) => ({
      buttonId: `btn_${index + 1}`,
      buttonText: { displayText: text },
      type: 1
    }));

    const result = await this.makeRequest('sendButtons', {
      chatId,
      message,
      footer: "",
      buttons: formattedButtons
    }, 'POST');

    if (!result.success) {
      // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
      const buttonsList = buttons.map((btn, index) => `${index + 1}. ${btn}`).join('\n');
      const fallbackMessage = `${message}\n\n${buttonsList}`;
      return await this.sendMessage(chatId, fallbackMessage);
    }

    return result;
  }

  async sendList(chatId, title, description, sections) {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –≤ ${chatId}`);
    
    const formattedSections = sections.map((section, sectionIndex) => ({
      title: section.title || `–†–∞–∑–¥–µ–ª ${sectionIndex + 1}`,
      rows: section.items.map((item, itemIndex) => ({
        title: item,
        description: "",
        rowId: `option_${sectionIndex}_${itemIndex}`
      }))
    }));

    return await this.makeRequest('sendListMessage', {
      chatId,
      message: {
        text: title,
        title: title,
        description: description,
        buttonText: "–í—ã–±—Ä–∞—Ç—å",
        sections: formattedSections
      }
    }, 'POST');
  }

  async getInstanceState() {
    return await this.makeRequest('getStateInstance');
  }

  async getSettings() {
    return await this.makeRequest('getSettings');
  }

  async getWaSettings() {
    return await this.makeRequest('getWaSettings');
  }

  async setWebhook(webhookUrl) {
    return await this.makeRequest('setWebhook', {
      webhookUrl: webhookUrl,
      set: true
    }, 'POST');
  }

  async updateSettings(settings) {
    return await this.makeRequest('setSettings', settings, 'POST');
  }
}

const greenAPI = new GreenAPIService(config.baseUrl, config.apiToken);

// Message Templates
const messages = {
  welcome: `üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–∞–∑—É –æ—Ç–¥—ã—Ö–∞ —É –æ–∑–µ—Ä–∞* üå≤üè°

–ú–µ–Ω—è –∑–æ–≤—É—Ç –Æ–ª–∏—è, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø–æ–¥–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.

üìç *–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é*

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`,

  importantInfo: `üîî *–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

‚Ä¢ –ó–∞–µ–∑–¥: —Å 14:00
‚Ä¢ –í—ã–µ–∑–¥: –¥–æ 12:00  
‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
‚Ä¢ –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –∑–∞ 7 –¥–Ω–µ–π –¥–æ –∑–∞–µ–∑–¥–∞
‚Ä¢ –ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∫—É—Ä–µ–Ω–∏–µ –≤ –Ω–æ–º–µ—Ä–∞—Ö

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`,

  rooms: `üõèÔ∏è *–ù–æ–º–µ—Ä–Ω–æ–π —Ñ–æ–Ω–¥*

üè† *–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:*
‚Ä¢ –û–¥–Ω–æ–º–µ—Å—Ç–Ω—ã–π - –æ—Ç 2500‚ÇΩ/—Å—É—Ç–∫–∏
‚Ä¢ –î–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π - –æ—Ç 3500‚ÇΩ/—Å—É—Ç–∫–∏
‚Ä¢ –°–µ–º–µ–π–Ω—ã–π - –æ—Ç 5000‚ÇΩ/—Å—É—Ç–∫–∏

üè° *–ö–æ—Ç—Ç–µ–¥–∂–∏:*
‚Ä¢ –ú–∞–ª—ã–π –∫–æ—Ç—Ç–µ–¥–∂ (4 —á–µ–ª) - –æ—Ç 8000‚ÇΩ/—Å—É—Ç–∫–∏
‚Ä¢ –ë–æ–ª—å—à–æ–π –∫–æ—Ç—Ç–µ–¥–∂ (8 —á–µ–ª) - –æ—Ç 15000‚ÇΩ/—Å—É—Ç–∫–∏

–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ *"–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"*
–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`,

  entertainment: `üö£ *–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è*

üèä‚Äç‚ôÄÔ∏è *–í–æ–¥–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:*
‚Ä¢ –ü—Ä–æ–∫–∞—Ç –ª–æ–¥–æ–∫ –∏ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤
‚Ä¢ –†—ã–±–∞–ª–∫–∞ (—Å–Ω–∞—Å—Ç–∏ –≤ –∞—Ä–µ–Ω–¥—É)
‚Ä¢ –ü–ª—è–∂–Ω—ã–π –≤–æ–ª–µ–π–±–æ–ª

üå≤ *–ù–∞ —Å—É—à–µ:*
‚Ä¢ –ë–∞–Ω—è –∏ —Å–∞—É–Ω–∞
‚Ä¢ –ú–∞–Ω–≥–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
‚Ä¢ –î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞
‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`,

  territory: `üìç *–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏*

üçΩÔ∏è *–ü–∏—Ç–∞–Ω–∏–µ:*
‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω —Å –≤–∏–¥–æ–º –Ω–∞ –æ–∑–µ—Ä–æ
‚Ä¢ –ö–∞—Ñ–µ —É –ø–ª—è–∂–∞
‚Ä¢ –ë–∞—Ä–±–µ–∫—é –∑–æ–Ω—ã

üöó *–£—Å–ª—É–≥–∏:*
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞
‚Ä¢ Wi-Fi –Ω–∞ –≤—Å–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
‚Ä¢ –ü—Ä–∞—á–µ—á–Ω–∞—è
‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`,

  contacts: `üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
üìß Email: info@ozero-base.ru
üåê –°–∞–π—Ç: www.ozero-base.ru
üìç –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ø. –û–∑–µ—Ä–Ω—ã–π, —É–ª. –õ–µ—Å–Ω–∞—è, 1

‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: 9:00 - 21:00
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`,

  directions: `üöó *–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è*

üöå *–ù–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ:*
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞ –¥–æ —Å—Ç. "–û–∑–µ—Ä–Ω–∞—è" (1 —á–∞—Å –æ—Ç –ú–æ—Å–∫–≤—ã)
‚Ä¢ –î–∞–ª–µ–µ –∞–≤—Ç–æ–±—É—Å ‚Ññ15 –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ "–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞"

üöó *–ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:*
‚Ä¢ –ü–æ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–º—É —à–æ—Å—Å–µ 85 –∫–º –æ—Ç –ú–ö–ê–î
‚Ä¢ –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞—Ç–µ–ª—è "–ø. –û–∑–µ—Ä–Ω—ã–π"
‚Ä¢ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 56.123456, 37.654321

üöñ *–¢—Ä–∞–Ω—Å—Ñ–µ—Ä:*
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä - 3000‚ÇΩ
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä - 1000‚ÇΩ/—á–µ–ª

–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ *"—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä"*
–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`,

  help: `üìã *–ü–æ–º–æ—â—å*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ *–º–µ–Ω—é* - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ *–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è* - –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
‚Ä¢ *–Ω–æ–º–µ—Ä–∞* - –Ω–æ–º–µ—Ä–Ω–æ–π —Ñ–æ–Ω–¥
‚Ä¢ *—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è* - —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å
‚Ä¢ *—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è* - —á—Ç–æ –µ—Å—Ç—å –Ω–∞ –±–∞–∑–µ
‚Ä¢ *–∫–æ–Ω—Ç–∞–∫—Ç—ã* - –∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è
‚Ä¢ *–¥–æ–±—Ä–∞—Ç—å—Å—è* - –∫–∞–∫ –¥–æ–µ—Ö–∞—Ç—å
‚Ä¢ *–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä
‚Ä¢ *–ø–æ–º–æ—â—å* - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ *"–æ–ø–µ—Ä–∞—Ç–æ—Ä"*`,

  operator: `üë©‚Äçüíº *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É*

–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. 
–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.

–í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00-21:00) –æ—Ç–≤–µ—Ç–∏–º –±—ã—Å—Ç—Ä–µ–µ!

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`,

  booking: `üìã *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞*

–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ:
1. –¢–∏–ø –Ω–æ–º–µ—Ä–∞
2. –î–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞  
3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
4. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

–ü—Ä–∏–º–µ—Ä: "–î–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, 15-17 –∏—é–ª—è, 2 —á–µ–ª–æ–≤–µ–∫–∞, +7-999-123-45-67"

–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (495) 123-45-67

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`,

  unknown: `‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ù–∞–ø–∏—à–∏—Ç–µ *"–ø–æ–º–æ—â—å"* –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"* –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ *"–æ–ø–µ—Ä–∞—Ç–æ—Ä"*.`
};

// Message Handler
class MessageHandler {
  constructor(greenAPI, userManager) {
    this.greenAPI = greenAPI;
    this.userManager = userManager;
    
    this.menuButtons = [
      "üîî –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
      "üõèÔ∏è –ù–æ–º–µ—Ä–Ω–æ–π —Ñ–æ–Ω–¥", 
      "üö£ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
      "üìç –ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏",
      "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
      "üöó –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è"
    ];
  }

  async handleNewUser(chatId) {
    console.log('üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId);
    
    this.userManager.createUser(chatId);
    await this.sendWelcomeMessage(chatId);
  }

  async handleExistingUser(chatId, messageText) {
    console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId);
    
    this.userManager.updateActivity(chatId);
    await this.processCommand(chatId, messageText);
  }

  async sendWelcomeMessage(chatId) {
    try {
      const result = await this.greenAPI.sendButtons(chatId, messages.welcome, this.menuButtons);
      
      if (!result.success) {
        // Fallback: –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        const menuText = `${messages.welcome}\n\n${this.menuButtons.map((btn, i) => `${i + 1}. ${btn}`).join('\n')}\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!`;
        await this.greenAPI.sendMessage(chatId, menuText);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
      await this.greenAPI.sendMessage(chatId, messages.help);
    }
  }

  async processCommand(chatId, messageText) {
    const command = messageText.toLowerCase().trim();
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥
    const commandMap = {
      // –¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
      '1': () => this.greenAPI.sendMessage(chatId, messages.importantInfo),
      '2': () => this.greenAPI.sendMessage(chatId, messages.rooms),
      '3': () => this.greenAPI.sendMessage(chatId, messages.entertainment),
      '4': () => this.greenAPI.sendMessage(chatId, messages.territory),
      '5': () => this.greenAPI.sendMessage(chatId, messages.contacts),
      '6': () => this.greenAPI.sendMessage(chatId, messages.directions),
      
      // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
      '–º–µ–Ω—é': () => this.sendWelcomeMessage(chatId),
      '—Å—Ç–∞—Ä—Ç': () => this.sendWelcomeMessage(chatId),
      'start': () => this.sendWelcomeMessage(chatId),
      '/start': () => this.sendWelcomeMessage(chatId),
      
      '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': () => this.greenAPI.sendMessage(chatId, messages.importantInfo),
      '–≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': () => this.greenAPI.sendMessage(chatId, messages.importantInfo),
      
      '–Ω–æ–º–µ—Ä–∞': () => this.greenAPI.sendMessage(chatId, messages.rooms),
      '–Ω–æ–º–µ—Ä–Ω–æ–π —Ñ–æ–Ω–¥': () => this.greenAPI.sendMessage(chatId, messages.rooms),
      '–∫–æ–º–Ω–∞—Ç—ã': () => this.greenAPI.sendMessage(chatId, messages.rooms),
      
      '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': () => this.greenAPI.sendMessage(chatId, messages.entertainment),
      '—á—Ç–æ –¥–µ–ª–∞—Ç—å': () => this.greenAPI.sendMessage(chatId, messages.entertainment),
      
      '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è': () => this.greenAPI.sendMessage(chatId, messages.territory),
      '–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏': () => this.greenAPI.sendMessage(chatId, messages.territory),
      '—É—Å–ª—É–≥–∏': () => this.greenAPI.sendMessage(chatId, messages.territory),
      
      '–∫–æ–Ω—Ç–∞–∫—Ç—ã': () => this.greenAPI.sendMessage(chatId, messages.contacts),
      '—Ç–µ–ª–µ—Ñ–æ–Ω': () => this.greenAPI.sendMessage(chatId, messages.contacts),
      
      '–¥–æ–±—Ä–∞—Ç—å—Å—è': () => this.greenAPI.sendMessage(chatId, messages.directions),
      '–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è': () => this.greenAPI.sendMessage(chatId, messages.directions),
      '–¥–æ—Ä–æ–≥–∞': () => this.greenAPI.sendMessage(chatId, messages.directions),
      
      '–ø–æ–º–æ—â—å': () => this.greenAPI.sendMessage(chatId, messages.help),
      'help': () => this.greenAPI.sendMessage(chatId, messages.help),
      '–∫–æ–º–∞–Ω–¥—ã': () => this.greenAPI.sendMessage(chatId, messages.help),
      
      '–æ–ø–µ—Ä–∞—Ç–æ—Ä': () => this.greenAPI.sendMessage(chatId, messages.operator),
      '—á–µ–ª–æ–≤–µ–∫': () => this.greenAPI.sendMessage(chatId, messages.operator),
      '–ø–æ–¥–¥–µ—Ä–∂–∫–∞': () => this.greenAPI.sendMessage(chatId, messages.operator),
      
      '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': () => this.greenAPI.sendMessage(chatId, messages.booking),
      '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å': () => this.greenAPI.sendMessage(chatId, messages.booking),
      '–∑–∞–∫–∞–∑–∞—Ç—å': () => this.greenAPI.sendMessage(chatId, messages.booking),
      
      '—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä': () => this.greenAPI.sendMessage(chatId, 
        `üöñ *–ó–∞–∫–∞–∑ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞*\n\n–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\nüì± +7 (495) 123-45-67\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏ –≤ —á–∞—Ç.\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"–º–µ–Ω—é"*`)
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    const handler = commandMap[command];
    if (handler) {
      await handler();
    } else {
      await this.greenAPI.sendMessage(chatId, messages.unknown);
    }
  }
}

const messageHandler = new MessageHandler(greenAPI, userManager);

// Webhook Processor
class WebhookProcessor {
  constructor(messageHandler, userManager) {
    this.messageHandler = messageHandler;
    this.userManager = userManager;
  }

  extractWebhookData(body) {
    const data = {
      chatId: null,
      messageText: null, 
      senderId: null,
      isIncoming: false
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø webhook
    data.isIncoming = body?.typeWebhook === 'incomingMessageReceived';
    
    if (!data.isIncoming) {
      return data;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º chatId
    data.chatId = body?.body?.senderData?.chatId || 
                  body?.senderData?.chatId || 
                  body?.body?.chatId || 
                  body?.chatId;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º senderId
    data.senderId = body?.body?.senderData?.sender || 
                    body?.senderData?.sender;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    data.messageText = body?.body?.messageData?.textMessageData?.textMessage ||
                       body?.messageData?.textMessageData?.textMessage;

    return data;
  }

  isMessageFromBot(senderId) {
    return senderId && senderId.includes(config.idInstance);
  }

  async processWebhook(body) {
    const data = this.extractWebhookData(body);
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ webhook:', {
      chatId: data.chatId,
      messageText: data.messageText?.substring(0, 50) + '...',
      senderId: data.senderId,
      isIncoming: data.isIncoming
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (!data.isIncoming) {
      return { processed: false, reason: '–ù–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' };
    }

    if (!data.chatId || !data.messageText) {
      return { processed: false, reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' };
    }

    if (this.isMessageFromBot(data.senderId)) {
      return { processed: false, reason: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞' };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    try {
      if (this.userManager.isNewUser(data.chatId)) {
        await this.messageHandler.handleNewUser(data.chatId);
      } else {
        await this.messageHandler.handleExistingUser(data.chatId, data.messageText);
      }

      return { 
        processed: true, 
        chatId: data.chatId,
        newUser: this.userManager.isNewUser(data.chatId)
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      try {
        await greenAPI.sendMessage(data.chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä'.");
      } catch (sendError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
      }

      return { processed: false, reason: error.message };
    }
  }
}

const webhookProcessor = new WebhookProcessor(messageHandler, userManager);

// Routes
// Health check
app.get('/', (req, res) => {
  res.json({
    status: 'OK',
    service: 'WhatsApp Bot –¥–ª—è –±–∞–∑—ã –æ—Ç–¥—ã—Ö–∞',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// API status check
app.get('/api/status', async (req, res) => {
  try {
    const [stateResult, settingsResult] = await Promise.all([
      greenAPI.getInstanceState(),
      greenAPI.getSettings()
    ]);

    res.json({
      success: true,
      config: {
        idInstance: config.idInstance,
        apiTokenLength: config.apiToken ? config.apiToken.length : 0,
        baseUrl: config.baseUrl
      },
      state: stateResult.success ? stateResult.data : stateResult.error,
      settings: settingsResult.success ? settingsResult.data : settingsResult.error,
      users: {
        total: userManager.getAllUsers().length,
        active: userManager.getAllUsers().filter(u => 
          Date.now() - new Date(u.lastActivity).getTime() < 24 * 60 * 60 * 1000
        ).length
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Users management
app.get('/api/users', (req, res) => {
  const users = userManager.getAllUsers();
  res.json({
    success: true,
    total: users.length,
    users: users
  });
});

app.post('/api/users/reset', (req, res) => {
  const { chatId } = req.body;
  
  if (chatId) {
    const deleted = userManager.deleteUser(chatId);
    res.json({
      success: deleted,
      message: deleted ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —É–¥–∞–ª–µ–Ω` : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
    });
  } else {
    userManager.clear();
    res.json({
      success: true,
      message: '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã'
    });
  }
});

// Test message
app.post('/api/test-message', async (req, res) => {
  try {
    const { chatId, message } = req.body;
    
    if (!chatId || !message) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã chatId –∏ message'
      });
    }

    const result = await greenAPI.sendMessage(chatId, message);
    
    res.json({
      success: result.success,
      result: result.data || result.error,
      message: result.success ? '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Webhook setup
app.post('/api/setup-webhook', async (req, res) => {
  try {
    const webhookUrl = `https://${req.get('host')}/webhook`;
    
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook:', webhookUrl);
    
    const [webhookResult, settingsResult] = await Promise.all([
      greenAPI.setWebhook(webhookUrl),
      greenAPI.updateSettings({
        webhookUrl: webhookUrl,
        webhookUrlToken: "",
        delaySendMessagesMilliseconds: 1000,
        markIncomingMessagesReaded: "no",
        proxyInstance: "",
        outgoingWebhook: "no",
        incomingWebhook: "yes",
        deviceWebhook: "no",
        statusInstanceWebhook: "no",
        sendFromUTC: "no"
      })
    ]);

    res.json({
      success: webhookResult.success && settingsResult.success,
      webhookUrl: webhookUrl,
      webhook: webhookResult,
      settings: settingsResult,
      message: (webhookResult.success && settingsResult.success) 
        ? 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ' 
        : '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Main webhook endpoint
app.post('/webhook', async (req, res) => {
  console.log('üîî Webhook –ø–æ–ª—É—á–µ–Ω');
  
  try {
    const result = await webhookProcessor.processWebhook(req.body);
    
    res.status(200).json({
      success: true,
      processed: result.processed,
      reason: result.reason,
      chatId: result.chatId,
      newUser: result.newUser,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Webhook verification (GET)
app.get('/webhook', (req, res) => {
  res.json({
    status: 'Webhook endpoint –∞–∫—Ç–∏–≤–µ–Ω',
    timestamp: new Date().toISOString()
  });
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({
    success: false,
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
  });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
  process.exit(0);
});

// Start server
app.listen(config.port, () => {
  console.log(`‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
  console.log(`üåê URL: http://localhost:${config.port}`);
  console.log(`üì° Webhook URL: http://localhost:${config.port}/webhook`);
  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log('- ID_INSTANCE:', config.idInstance ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- API_TOKEN:', config.apiToken ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- DEBUG —Ä–µ–∂–∏–º:', config.debug ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω');
  console.log('\nüöÄ WhatsApp –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});