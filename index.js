require('dotenv').config();
const express = require('express');
const axios = require('axios');
const app = express();

app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  console.log('Headers:', JSON.stringify(req.headers, null, 2));
  console.log('Body:', JSON.stringify(req.body, null, 2));
  next();
});

const ID_INSTANCE = process.env.ID_INSTANCE;
const API_TOKEN = process.env.API_TOKEN_INSTANCE;

const BASE_URL = `https://1103.api.green-api.com/waInstance${ID_INSTANCE}`;

const sendMessage = async (chatId, text) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:');
    console.log('- Chat ID:', chatId);
    console.log('- Text:', text);
    console.log('- URL:', `${BASE_URL}/sendMessage/${API_TOKEN}`);
    
    const payload = {
      chatId,
      message: text,
    };
    
    console.log('üì§ Payload –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(payload, null, 2));
    
    const response = await axios.post(`${BASE_URL}/sendMessage/${API_TOKEN}`, payload);
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:');
    console.error('- Status:', error.response?.status);
    console.error('- Status Text:', error.response?.statusText);
    console.error('- Data:', error.response?.data);
    console.error('- Headers:', error.response?.headers);
    console.error('- Config URL:', error.config?.url);
    console.error('- Base URL:', BASE_URL);
    console.error('- API Token length:', API_TOKEN ? API_TOKEN.length : 'undefined');
    console.error('- ID Instance:', ID_INSTANCE);
    throw error;
  }
};

const sendButtons = async (chatId, message, buttons) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫:');
    console.log('- Chat ID:', chatId);
    console.log('- Message:', message);
    console.log('- Buttons:', buttons);
    console.log('- URL:', `${BASE_URL}/sendButtons/${API_TOKEN}`);
    
    const formattedButtons = buttons.map((text, index) => ({
      buttonId: `btn_${index + 1}`,
      buttonText: { displayText: text },
      type: 1,
    }));

    const payload = {
      chatId,
      message,
      footer: "", // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π footer
      buttons: formattedButtons,
    };
    
    console.log('üì§ Payload –¥–ª—è –∫–Ω–æ–ø–æ–∫:', JSON.stringify(payload, null, 2));

    const response = await axios.post(`${BASE_URL}/sendButtons/${API_TOKEN}`, payload);
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫:');
    console.error('- Status:', error.response?.status);
    console.error('- Status Text:', error.response?.statusText);
    console.error('- Data:', error.response?.data);
    console.error('- Headers:', error.response?.headers);
    console.error('- Config URL:', error.config?.url);
    
    // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫...');
    const buttonsList = buttons.map((btn, index) => `${index + 1}. ${btn}`).join('\n');
    await sendMessage(chatId, `${message}\n\n${buttonsList}`);
    
    return { fallback: true, message: '–ö–Ω–æ–ø–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ç–µ–∫—Å—Ç' };
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–∞–º)
const sendList = async (chatId, title, description, sections) => {
  try {
    console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫:');
    console.log('- Chat ID:', chatId);
    console.log('- Title:', title);
    console.log('- Sections:', sections);
    
    const payload = {
      chatId,
      message: {
        text: title,
        title: title,
        description: description,
        buttonText: "–í—ã–±—Ä–∞—Ç—å",
        sections: sections.map((section, sectionIndex) => ({
          title: section.title || `–†–∞–∑–¥–µ–ª ${sectionIndex + 1}`,
          rows: section.items.map((item, itemIndex) => ({
            title: item,
            description: "",
            rowId: `option_${sectionIndex}_${itemIndex}`
          }))
        }))
      }
    };
    
    console.log('üì§ Payload –¥–ª—è —Å–ø–∏—Å–∫–∞:', JSON.stringify(payload, null, 2));
    
    const response = await axios.post(`${BASE_URL}/sendListMessage/${API_TOKEN}`, payload);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞:', error.response?.data || error.message);
    throw error;
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  console.log('GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
  res.json({ 
    status: 'OK', 
    message: 'WhatsApp Bot —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º GET endpoint –¥–ª—è webhook (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
app.get('/webhook', (req, res) => {
  console.log('GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook');
  res.json({ 
    status: 'Webhook endpoint –∞–∫—Ç–∏–≤–µ–Ω',
    timestamp: new Date().toISOString()
  });
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Green API
app.get('/test-api', async (req, res) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Green API...');
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log('- ID_INSTANCE:', ID_INSTANCE);
    console.log('- API_TOKEN:', API_TOKEN ? `${API_TOKEN.substring(0, 10)}...` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('- BASE_URL:', BASE_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞...');
    const stateResponse = await axios.get(`${BASE_URL}/getStateInstance/${API_TOKEN}`);
    console.log('üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞:', stateResponse.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞...');
    const settingsResponse = await axios.get(`${BASE_URL}/getSettings/${API_TOKEN}`);
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞:', settingsResponse.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WhatsApp...');
    const accountResponse = await axios.get(`${BASE_URL}/getWaSettings/${API_TOKEN}`);
    console.log('üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WhatsApp:', accountResponse.data);
    
    res.json({
      success: true,
      config: {
        idInstance: ID_INSTANCE,
        apiTokenLength: API_TOKEN ? API_TOKEN.length : 0,
        baseUrl: BASE_URL
      },
      state: stateResponse.data,
      settings: settingsResponse.data,
      account: accountResponse.data
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:');
    console.error('- Status:', error.response?.status);
    console.error('- Status Text:', error.response?.statusText);
    console.error('- Data:', error.response?.data);
    console.error('- URL:', error.config?.url);
    
    res.status(500).json({
      success: false,
      error: {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      },
      config: {
        idInstance: ID_INSTANCE,
        apiTokenLength: API_TOKEN ? API_TOKEN.length : 0,
        baseUrl: BASE_URL
      }
    });
  }
});

// Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/users', (req, res) => {
  const users = Array.from(userSessions.entries()).map(([chatId, session]) => ({
    chatId,
    firstContact: session.firstContact,
    lastActivity: session.lastActivity,
    messageCount: session.messageCount
  }));
  
  res.json({
    success: true,
    totalUsers: users.length,
    users: users
  });
});

// Endpoint –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.post('/reset-users', (req, res) => {
  const { chatId } = req.body;
  
  if (chatId) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userSessions.has(chatId)) {
      userSessions.delete(chatId);
      res.json({
        success: true,
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —Å–±—Ä–æ—à–µ–Ω`
      });
    } else {
      res.json({
        success: false,
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
      });
    }
  } else {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    userSessions.clear();
    res.json({
      success: true,
      message: '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã'
    });
  }
});

// Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/test-message', async (req, res) => {
  try {
    const { chatId, message } = req.body;
    
    if (!chatId || !message) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã chatId –∏ message'
      });
    }
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${chatId}: ${message}`);
    
    const result = await sendMessage(chatId, message);
    
    res.json({
      success: true,
      result: result,
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook —á–µ—Ä–µ–∑ API
app.post('/setup-webhook', async (req, res) => {
  try {
    const webhookUrl = `https://${req.get('host')}/webhook`;
    
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook:', webhookUrl);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook URL
    const webhookResponse = await axios.post(`${BASE_URL}/setWebhook/${API_TOKEN}`, {
      webhookUrl: webhookUrl,
      set: true
    });
    
    console.log('üì° Webhook URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookResponse.data);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const settingsResponse = await axios.post(`${BASE_URL}/setSettings/${API_TOKEN}`, {
      webhookUrl: webhookUrl,
      webhookUrlToken: "",
      delaySendMessagesMilliseconds: 1000,
      markIncomingMessagesReaded: "no",
      proxyInstance: "",
      outgoingWebhook: "no",          // –û—Ç–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ
      incomingWebhook: "yes",         // –í–∫–ª—é—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ
      deviceWebhook: "no",
      statusInstanceWebhook: "no",
      sendFromUTC: "no"
    });
    
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', settingsResponse.data);
    
    res.json({
      success: true,
      webhookUrl: webhookUrl,
      webhookResponse: webhookResponse.data,
      settingsResponse: settingsResponse.data,
      message: 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.response?.data || error.message);
    res.status(500).json({
      success: false,
      error: error.response?.data || error.message
    });
  }
});

// –•—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const userSessions = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const isNewUser = (chatId) => {
  return !userSessions.has(chatId);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ
const markUserAsKnown = (chatId) => {
  userSessions.set(chatId, {
    firstContact: new Date(),
    lastActivity: new Date(),
    messageCount: 0
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const updateUserActivity = (chatId) => {
  if (userSessions.has(chatId)) {
    const session = userSessions.get(chatId);
    session.lastActivity = new Date();
    session.messageCount++;
    userSessions.set(chatId, session);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const sendWelcomeMessage = async (chatId) => {
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');
  
  try {
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
    await sendButtons(chatId, 
      "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–Ø –≤–∞—à WhatsApp –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", 
      ["üè† –ì–ª–∞–≤–Ω–∞—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    );
    console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (buttonError) {
    console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –ø—Ä–æ–±—É–µ–º —Å–ø–∏—Å–æ–∫...');
    
    try {
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
      await sendList(chatId, 
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", 
        "–Ø –≤–∞—à WhatsApp –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        [
          {
            title: "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            items: ["üè† –ì–ª–∞–≤–Ω–∞—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
          },
          {
            title: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", 
            items: ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìã –ü–æ–º–æ—â—å", "üí¨ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"]
          }
        ]
      );
      console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } catch (listError) {
      console.log('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–∂–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      
      // –í–∞—Ä–∏–∞–Ω—Ç 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
      await sendMessage(chatId, `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–Ø –≤–∞—à WhatsApp –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

üè† *1* - –ì–ª–∞–≤–Ω–∞—è
‚ÑπÔ∏è *2* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
üìû *3* - –ö–æ–Ω—Ç–∞–∫—Ç—ã
‚öôÔ∏è *4* - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
üìã *5* - –ü–æ–º–æ—â—å
üí¨ *6* - –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!`);
      console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const handleUserMessage = async (chatId, messageText) => {
  const lowerMessage = messageText.toLowerCase().trim();
  
  console.log(`üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: "${messageText}"`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  switch (lowerMessage) {
    case '1':
    case '–≥–ª–∞–≤–Ω–∞—è':
    case 'home':
      await sendMessage(chatId, "üè† *–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞*\n\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.");
      break;
      
    case '2':
    case '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
    case 'info':
      await sendMessage(chatId, "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n–≠—Ç–æ WhatsApp –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.");
      break;
      
    case '3':
    case '–∫–æ–Ω—Ç–∞–∫—Ç—ã':
    case 'contacts':
      await sendMessage(chatId, "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*\n\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n‚Ä¢ Email: info@example.com\n‚Ä¢ –°–∞–π—Ç: www.example.com");
      break;
      
    case '4':
    case '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
    case 'settings':
      await sendMessage(chatId, "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.");
      break;
      
    case '5':
    case '–ø–æ–º–æ—â—å':
    case 'help':
      await sendMessage(chatId, "üìã *–ü–æ–º–æ—â—å*\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ 1 - –ì–ª–∞–≤–Ω–∞—è\n‚Ä¢ 2 - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n‚Ä¢ 3 - –ö–æ–Ω—Ç–∞–∫—Ç—ã\n‚Ä¢ 4 - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n‚Ä¢ 5 - –ü–æ–º–æ—â—å\n‚Ä¢ 6 - –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º");
      break;
      
    case '6':
    case '–æ–ø–µ—Ä–∞—Ç–æ—Ä':
    case 'operator':
      await sendMessage(chatId, "üí¨ *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É*\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.");
      break;
      
    case '—Å—Ç–∞—Ä—Ç':
    case 'start':
    case '/start':
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "—Å—Ç–∞—Ä—Ç", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
      await sendWelcomeMessage(chatId);
      break;
      
    default:
      // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
      await sendMessage(chatId, `‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É "${messageText}".\n\n–ù–∞–ø–∏—à–∏—Ç–µ *"–ø–æ–º–æ—â—å"* –∏–ª–∏ *"5"* –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ *"—Å—Ç–∞—Ä—Ç"*.`);
      break;
  }
};

app.post('/webhook', async (req, res) => {
  console.log('üîî –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook');
  console.log('–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
  
  try {
    const body = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –∏—Å—Ö–æ–¥—è—â–µ–µ
    const isIncomingMessage = body?.typeWebhook === 'incomingMessageReceived';
    const isOutgoingMessage = body?.typeWebhook === 'outgoingMessageReceived';
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ webhook:');
    console.log('- –¢–∏–ø webhook:', body?.typeWebhook);
    console.log('- –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', isIncomingMessage);
    console.log('- –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', isOutgoingMessage);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!isIncomingMessage) {
      console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return res.status(200).json({ 
        success: true, 
        message: 'Webhook –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–Ω–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)' 
      });
    }
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhook
    let chatId = null;
    let messageText = null;
    let webhookType = null;
    let senderId = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã webhook –æ—Ç Green API
    if (body?.body?.senderData?.chatId) {
      chatId = body.body.senderData.chatId;
      senderId = body.body.senderData.sender;
      webhookType = 'senderData';
    } else if (body?.senderData?.chatId) {
      chatId = body.senderData.chatId;
      senderId = body.senderData.sender;
      webhookType = 'direct senderData';
    } else if (body?.body?.chatId) {
      chatId = body.body.chatId;
      webhookType = 'body chatId';
    } else if (body?.chatId) {
      chatId = body.chatId;
      webhookType = 'direct chatId';
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (body?.body?.messageData?.textMessageData?.textMessage) {
      messageText = body.body.messageData.textMessageData.textMessage;
    } else if (body?.messageData?.textMessageData?.textMessage) {
      messageText = body.messageData.textMessageData.textMessage;
    }
    
    console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('- Chat ID:', chatId);
    console.log('- Sender ID:', senderId);
    console.log('- Message Text:', messageText);
    console.log('- Webhook Type:', webhookType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    const instanceId = process.env.ID_INSTANCE;
    const isFromBot = senderId && senderId.includes(instanceId);
    
    if (isFromBot) {
      console.log('ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞');
      return res.status(200).json({ 
        success: true, 
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ - –ø—Ä–æ–ø—É—â–µ–Ω–æ' 
      });
    }
    
    if (chatId && messageText) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω Chat ID –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (isNewUser(chatId)) {
          console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
          
          // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ
          markUserAsKnown(chatId);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await sendWelcomeMessage(chatId);
          
        } else {
          console.log('üë§ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          updateUserActivity(chatId);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await handleUserMessage(chatId, messageText);
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å'.");
        } catch (sendError) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError.message);
        }
      }
    } else {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞:');
      console.log('- Chat ID –Ω–∞–π–¥–µ–Ω:', !!chatId);
      console.log('- –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω:', !!messageText);
    }

    res.status(200).json({ 
      success: true, 
      message: 'Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      chatId: chatId,
      webhookType: webhookType,
      processed: !!(chatId && messageText),
      newUser: chatId ? isNewUser(chatId) : false
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', err.message);
    console.error('Stack trace:', err.stack);
    res.status(500).json({ 
      success: false, 
      error: err.message 
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log(`üì° Webhook URL: http://localhost:${PORT}/webhook`);
  console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('- ID_INSTANCE:', ID_INSTANCE ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- API_TOKEN:', API_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
});