require('dotenv').config();
const express = require('express');
const axios = require('axios');
const app = express();

app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  console.log('Headers:', JSON.stringify(req.headers, null, 2));
  console.log('Body:', JSON.stringify(req.body, null, 2));
  next();
});

const ID_INSTANCE = process.env.ID_INSTANCE;
const API_TOKEN = process.env.API_TOKEN_INSTANCE;

const BASE_URL = `https://1103.api.green-api.com/waInstance${ID_INSTANCE}`;

const sendMessage = async (chatId, text) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:');
    console.log('- Chat ID:', chatId);
    console.log('- Text:', text);
    console.log('- URL:', `${BASE_URL}/sendMessage/${API_TOKEN}`);
    
    const payload = {
      chatId,
      message: text,
    };
    
    console.log('üì§ Payload –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(payload, null, 2));
    
    const response = await axios.post(`${BASE_URL}/sendMessage/${API_TOKEN}`, payload);
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:');
    console.error('- Status:', error.response?.status);
    console.error('- Status Text:', error.response?.statusText);
    console.error('- Data:', error.response?.data);
    console.error('- Headers:', error.response?.headers);
    console.error('- Config URL:', error.config?.url);
    console.error('- Base URL:', BASE_URL);
    console.error('- API Token length:', API_TOKEN ? API_TOKEN.length : 'undefined');
    console.error('- ID Instance:', ID_INSTANCE);
    throw error;
  }
};

const sendButtons = async (chatId, message, buttons) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫:');
    console.log('- Chat ID:', chatId);
    console.log('- Message:', message);
    console.log('- Buttons:', buttons);
    console.log('- URL:', `${BASE_URL}/sendButtons/${API_TOKEN}`);
    
    const formattedButtons = buttons.map((text, index) => ({
      buttonId: `btn_${index + 1}`,
      buttonText: { displayText: text },
      type: 1,
    }));

    const payload = {
      chatId,
      message,
      footer: "", // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π footer
      buttons: formattedButtons,
    };
    
    console.log('üì§ Payload –¥–ª—è –∫–Ω–æ–ø–æ–∫:', JSON.stringify(payload, null, 2));

    const response = await axios.post(`${BASE_URL}/sendButtons/${API_TOKEN}`, payload);
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫:');
    console.error('- Status:', error.response?.status);
    console.error('- Status Text:', error.response?.statusText);
    console.error('- Data:', error.response?.data);
    console.error('- Headers:', error.response?.headers);
    console.error('- Config URL:', error.config?.url);
    
    // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫...');
    const buttonsList = buttons.map((btn, index) => `${index + 1}. ${btn}`).join('\n');
    await sendMessage(chatId, `${message}\n\n${buttonsList}`);
    
    return { fallback: true, message: '–ö–Ω–æ–ø–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ç–µ–∫—Å—Ç' };
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–∞–º)
const sendList = async (chatId, title, description, sections) => {
  try {
    console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫:');
    console.log('- Chat ID:', chatId);
    console.log('- Title:', title);
    console.log('- Sections:', sections);
    
    const payload = {
      chatId,
      message: {
        text: title,
        title: title,
        description: description,
        buttonText: "–í—ã–±—Ä–∞—Ç—å",
        sections: sections.map((section, sectionIndex) => ({
          title: section.title || `–†–∞–∑–¥–µ–ª ${sectionIndex + 1}`,
          rows: section.items.map((item, itemIndex) => ({
            title: item,
            description: "",
            rowId: `option_${sectionIndex}_${itemIndex}`
          }))
        }))
      }
    };
    
    console.log('üì§ Payload –¥–ª—è —Å–ø–∏—Å–∫–∞:', JSON.stringify(payload, null, 2));
    
    const response = await axios.post(`${BASE_URL}/sendListMessage/${API_TOKEN}`, payload);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞:', error.response?.data || error.message);
    throw error;
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  console.log('GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
  res.json({ 
    status: 'OK', 
    message: 'WhatsApp Bot —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º GET endpoint –¥–ª—è webhook (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
app.get('/webhook', (req, res) => {
  console.log('GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook');
  res.json({ 
    status: 'Webhook endpoint –∞–∫—Ç–∏–≤–µ–Ω',
    timestamp: new Date().toISOString()
  });
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Green API
app.get('/test-api', async (req, res) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Green API...');
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log('- ID_INSTANCE:', ID_INSTANCE);
    console.log('- API_TOKEN:', API_TOKEN ? `${API_TOKEN.substring(0, 10)}...` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('- BASE_URL:', BASE_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞...');
    const stateResponse = await axios.get(`${BASE_URL}/getStateInstance/${API_TOKEN}`);
    console.log('üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞:', stateResponse.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞...');
    const settingsResponse = await axios.get(`${BASE_URL}/getSettings/${API_TOKEN}`);
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞:', settingsResponse.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WhatsApp...');
    const accountResponse = await axios.get(`${BASE_URL}/getWaSettings/${API_TOKEN}`);
    console.log('üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WhatsApp:', accountResponse.data);
    
    res.json({
      success: true,
      config: {
        idInstance: ID_INSTANCE,
        apiTokenLength: API_TOKEN ? API_TOKEN.length : 0,
        baseUrl: BASE_URL
      },
      state: stateResponse.data,
      settings: settingsResponse.data,
      account: accountResponse.data
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:');
    console.error('- Status:', error.response?.status);
    console.error('- Status Text:', error.response?.statusText);
    console.error('- Data:', error.response?.data);
    console.error('- URL:', error.config?.url);
    
    res.status(500).json({
      success: false,
      error: {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      },
      config: {
        idInstance: ID_INSTANCE,
        apiTokenLength: API_TOKEN ? API_TOKEN.length : 0,
        baseUrl: BASE_URL
      }
    });
  }
});

// Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/test-message', async (req, res) => {
  try {
    const { chatId, message } = req.body;
    
    if (!chatId || !message) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã chatId –∏ message'
      });
    }
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${chatId}: ${message}`);
    
    const result = await sendMessage(chatId, message);
    
    res.json({
      success: true,
      result: result,
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook —á–µ—Ä–µ–∑ API
app.post('/setup-webhook', async (req, res) => {
  try {
    const webhookUrl = `https://${req.get('host')}/webhook`;
    
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook:', webhookUrl);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook URL
    const webhookResponse = await axios.post(`${BASE_URL}/setWebhook/${API_TOKEN}`, {
      webhookUrl: webhookUrl,
      set: true
    });
    
    console.log('üì° Webhook URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookResponse.data);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const settingsResponse = await axios.post(`${BASE_URL}/setSettings/${API_TOKEN}`, {
      webhookUrl: webhookUrl,
      webhookUrlToken: "",
      delaySendMessagesMilliseconds: 1000,
      markIncomingMessagesReaded: "no",
      proxyInstance: "",
      outgoingWebhook: "no",          // –û—Ç–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ
      incomingWebhook: "yes",         // –í–∫–ª—é—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ
      deviceWebhook: "no",
      statusInstanceWebhook: "no",
      sendFromUTC: "no"
    });
    
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', settingsResponse.data);
    
    res.json({
      success: true,
      webhookUrl: webhookUrl,
      webhookResponse: webhookResponse.data,
      settingsResponse: settingsResponse.data,
      message: 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.response?.data || error.message);
    res.status(500).json({
      success: false,
      error: error.response?.data || error.message
    });
  }
});

app.post('/webhook', async (req, res) => {
  console.log('üîî –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook');
  console.log('–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
  
  try {
    const body = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –∏—Å—Ö–æ–¥—è—â–µ–µ
    const isIncomingMessage = body?.typeWebhook === 'incomingMessageReceived';
    const isOutgoingMessage = body?.typeWebhook === 'outgoingMessageReceived';
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ webhook:');
    console.log('- –¢–∏–ø webhook:', body?.typeWebhook);
    console.log('- –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', isIncomingMessage);
    console.log('- –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', isOutgoingMessage);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!isIncomingMessage) {
      console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return res.status(200).json({ 
        success: true, 
        message: 'Webhook –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–Ω–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)' 
      });
    }
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhook
    let chatId = null;
    let messageText = null;
    let webhookType = null;
    let senderId = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã webhook –æ—Ç Green API
    if (body?.body?.senderData?.chatId) {
      chatId = body.body.senderData.chatId;
      senderId = body.body.senderData.sender;
      webhookType = 'senderData';
    } else if (body?.senderData?.chatId) {
      chatId = body.senderData.chatId;
      senderId = body.senderData.sender;
      webhookType = 'direct senderData';
    } else if (body?.body?.chatId) {
      chatId = body.body.chatId;
      webhookType = 'body chatId';
    } else if (body?.chatId) {
      chatId = body.chatId;
      webhookType = 'direct chatId';
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (body?.body?.messageData?.textMessageData?.textMessage) {
      messageText = body.body.messageData.textMessageData.textMessage;
    } else if (body?.messageData?.textMessageData?.textMessage) {
      messageText = body.messageData.textMessageData.textMessage;
    }
    
    console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('- Chat ID:', chatId);
    console.log('- Sender ID:', senderId);
    console.log('- Message Text:', messageText);
    console.log('- Webhook Type:', webhookType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    const instanceId = process.env.ID_INSTANCE;
    const isFromBot = senderId && senderId.includes(instanceId);
    
    if (isFromBot) {
      console.log('ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞');
      return res.status(200).json({ 
        success: true, 
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ - –ø—Ä–æ–ø—É—â–µ–Ω–æ' 
      });
    }
    
    if (chatId && messageText) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω Chat ID –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç...');
      
      try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏...');
        
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        try {
          await sendButtons(chatId, 
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", 
            ["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2", "–ö–Ω–æ–ø–∫–∞ 3"]
          );
          console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } catch (buttonError) {
          console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –ø—Ä–æ–±—É–µ–º —Å–ø–∏—Å–æ–∫...');
          
          // –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
          try {
            await sendList(chatId, 
              "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", 
              "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
              [
                {
                  title: "–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏",
                  items: ["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2", "–ö–Ω–æ–ø–∫–∞ 3"]
                },
                {
                  title: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏", 
                  items: ["–ö–Ω–æ–ø–∫–∞ 4", "–ö–Ω–æ–ø–∫–∞ 5", "–ö–Ω–æ–ø–∫–∞ 6"]
                }
              ]
            );
            console.log('‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
          } catch (listError) {
            console.log('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–∂–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
            
            // –í–∞—Ä–∏–∞–Ω—Ç 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
            await sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

1Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ 1
2Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ 2  
3Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ 3

4Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ 4
5Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ 5
6Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ 6

7Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ 7

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!`);
            console.log('‚úÖ –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
          }
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      }
    } else {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞:');
      console.log('- Chat ID –Ω–∞–π–¥–µ–Ω:', !!chatId);
      console.log('- –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω:', !!messageText);
    }

    res.status(200).json({ 
      success: true, 
      message: 'Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      chatId: chatId,
      webhookType: webhookType,
      processed: !!(chatId && messageText)
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', err.message);
    console.error('Stack trace:', err.stack);
    res.status(500).json({ 
      success: false, 
      error: err.message 
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log(`üì° Webhook URL: http://localhost:${PORT}/webhook`);
  console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('- ID_INSTANCE:', ID_INSTANCE ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- API_TOKEN:', API_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
});