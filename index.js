require('dotenv').config();
const express = require('express');
const axios = require('axios');
const app = express();

app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  console.log('Headers:', JSON.stringify(req.headers, null, 2));
  console.log('Body:', JSON.stringify(req.body, null, 2));
  next();
});

const ID_INSTANCE = process.env.ID_INSTANCE;
const API_TOKEN = process.env.API_TOKEN_INSTANCE;

const BASE_URL = `https://1103.api.green-api.com/waInstance${ID_INSTANCE}`;

const sendMessage = async (chatId, text) => {
  try {
    const response = await axios.post(`${BASE_URL}/sendMessage/${API_TOKEN}`, {
      chatId,
      message: text,
    });
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message);
    throw error;
  }
};

const sendButtons = async (chatId, message, buttons) => {
  try {
    const formattedButtons = buttons.map((text, index) => ({
      buttonId: `btn_${index + 1}`,
      buttonText: { displayText: text },
      type: 1,
    }));

    const response = await axios.post(`${BASE_URL}/sendButtons/${API_TOKEN}`, {
      chatId,
      message,
      buttons: formattedButtons,
    });
    console.log('–ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', response.data);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫:', error.response?.data || error.message);
    throw error;
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  console.log('GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
  res.json({ 
    status: 'OK', 
    message: 'WhatsApp Bot —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º GET endpoint –¥–ª—è webhook (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
app.get('/webhook', (req, res) => {
  console.log('GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook');
  res.json({ 
    status: 'Webhook endpoint –∞–∫—Ç–∏–≤–µ–Ω',
    timestamp: new Date().toISOString()
  });
});

app.post('/webhook', async (req, res) => {
  console.log('üîî –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook');
  console.log('–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
  
  try {
    const body = req.body;
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhook
    let chatId = null;
    let messageText = null;
    let webhookType = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã webhook –æ—Ç Green API
    if (body?.body?.senderData?.chatId) {
      chatId = body.body.senderData.chatId;
      webhookType = 'senderData';
    } else if (body?.senderData?.chatId) {
      chatId = body.senderData.chatId;
      webhookType = 'direct senderData';
    } else if (body?.body?.chatId) {
      chatId = body.body.chatId;
      webhookType = 'body chatId';
    } else if (body?.chatId) {
      chatId = body.chatId;
      webhookType = 'direct chatId';
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (body?.body?.messageData?.textMessageData?.textMessage) {
      messageText = body.body.messageData.textMessageData.textMessage;
    } else if (body?.messageData?.textMessageData?.textMessage) {
      messageText = body.messageData.textMessageData.textMessage;
    }
    
    console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('- Chat ID:', chatId);
    console.log('- Message Text:', messageText);
    console.log('- Webhook Type:', webhookType);
    console.log('- –¢–∏–ø webhook:', body?.typeWebhook);
    
    if (chatId) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω Chat ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç...');
      
      await sendMessage(chatId, '–ó–î–ï–°–¨ –ë–£–î–ï–¢ –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–´–ô –¢–ï–ö–°–¢');
      
      await sendButtons(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç 1:', ['–ö–Ω–æ–ø–∫–∞ 1', '–ö–Ω–æ–ø–∫–∞ 2', '–ö–Ω–æ–ø–∫–∞ 3']);
      await sendButtons(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç 2:', ['–ö–Ω–æ–ø–∫–∞ 4', '–ö–Ω–æ–ø–∫–∞ 5', '–ö–Ω–æ–ø–∫–∞ 6']);
      await sendMessage(chatId, '–ö–Ω–æ–ø–∫–∞ 7');
      
      console.log('‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ webhook –¥–∞–Ω–Ω—ã—Ö');
    }

    res.status(200).json({ 
      success: true, 
      message: 'Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      chatId: chatId,
      webhookType: webhookType
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', err.message);
    console.error('Stack trace:', err.stack);
    res.status(500).json({ 
      success: false, 
      error: err.message 
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log(`üì° Webhook URL: http://localhost:${PORT}/webhook`);
  console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('- ID_INSTANCE:', ID_INSTANCE ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- API_TOKEN:', API_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
});